1 - https://www.reddit.com/r/learnprogramming/comments/rz1fcx/c_portfolio_projects_ideas/

2 - https://www.reddit.com/r/csharp/comments/pd2lzf/idk_c_yet_what_are_the_options_for_desktop_ui/

## BASICS

Console.WriteLine()

string aFriend = "test string";

bool (true or false) test = false;

'' = char literal
"" = string literals

Console.WriteLine(3.459m); -> "m" or "M" creates a decimal literal
decimal temperature = 34.4m;


## STRINGS

Console.WriteLine -> Tudo numa linha s�, se escrever em outra linha n�o fica junto

Console.WriteLine("Hello ", aFriend);
Console.WriteLine($"Hello + {aFriend.length}");

string.length

Console.Write -> Vai juntar com todas .Write que foram escritas em cima ou embaixo

https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated

\scape is needed for some characters

$ -> Allows you to add variables to the string
@ -> Allows you to use multiline

Console.WriteLine($@"This is the first line.
This is the second line.");

Console.WriteLine("This is the first line.");
Console.Write("This is the second ");
Console.Write("line.");

Console.WriteLine($@"
This is the first line.");
Console.WriteLine("This is the second line.");

    Character Escape Sequences
    Console.WriteLine("Hello\nWorld!");
    Console.WriteLine("Hello\tWorld!");
    Console.WriteLine("c:\\source\\repos");

Verbatim String Literal

## VARIABLES

Variables are reassignable:

string myName;
myName = "bob";

## IMPLICITY TYPED LOCAL VARIABLE (VAR)

var message = "Hello World!";
message = 10.0m; -> once declared, the variable type cannot be changed,

var message; -> it can only be used it if the variable is initialized (and not only set).

The var keyword tells the compiler to infer the data type of the variable based on the value it is initialized to.
You should use the data type when possible.

# MATH OPERATIONS

CASTING -> type of data conversion that instructs the compiler to temporarily treat a value as if it were a different data type.

int sum = 7 + 5;
int difference = 7 - 5;
int product = 7 * 5;
int quotient = 7 / 5;
double decimalQuotient = 7.0/5;

Console.WriteLine($"Sum: {sum}");
Console.WriteLine($"Difference: {difference}");
Console.WriteLine($"Product: {product}");
Console.WriteLine($"Quotient: {quotient}");
Console.WriteLine($"Decimal Quotient: {decimalQuotient}");

Literal decimal data: 
int first = 7;
int second = 5;
decimal quotient = (decimal)first / (decimal)second;

Console.WriteLine(quotient);

PEMDAS:
Parentheses (whatever is inside the parenthesis is performed first)
Exponents
Multiplication and Division (from left to right)
Addition and Subtraction (from left to right)

System.Math.Pow() -> Exponent method

Incrementing values: just like javascript, only one differenceint
value = 1;
value++;
Console.WriteLine("First: " + value);
Console.WriteLine("Second: " + value++);
Console.WriteLine("Third: " + value);
Console.WriteLine("Fourth: " + (++value)); -> increment the value first, and then retrieves the new incremented value

## NAMESPACE
Think of a namespace as the last name, surname or "family name" for a type. A class contains the code that implements a type. Classes are organized into namespaces to prevent naming collisions. After all, when there are thousands of classes, it's possible that there might be a need to reuse a class name. The namespace helps to make sure no two classes have the same full name.

## METHODS
Random dice = new Random();
int roll = dice.Next(1, 7);
Console.WriteLine(roll);
The first line of code creates a new instance of the System.Random class in the .NET Class Library and stores the reference to the new object in a variable named dice.

The second line of code calls the dice object's Next() method passing in two parameters: the minimum and maximum value of the random number. The Next() method returns the value, which we save into a variable named roll.

The third line of code calls the WriteLine() method to print the value of roll to the console.

## STATEFUL AND STATELESS METHODS
Some methods don't rely on the current state of the application to work properly. In other words, stateless methods are implemented so that they can work without referencing or changing any values already stored in memory. Stateless methods are also known as static methods.

For example, the Console.WriteLine() method doesn't rely on any values stored in memory. It performs its function and finishes without impacting the state of the application in any way.

Other methods, however, must have access to the state of the application to work properly. In other words, stateful methods are built in such a way that they rely on values stored in memory by previous lines of code that have already executed. Or they modify the state of the application by updating values or storing new values in memory. They're also known as instance methods.

Stateful (instance) methods keep track of their state in fields, which are variables defined on the class. Each new instance of the class gets its own copy of those fields in which to store state.

## INSTANCE OF A CLASS
An instance of a class is called an object. To create a new instance of a class, you use the new operator.
Random dice = new Random();
It first requests an address in the computer's memory large enough to store a new object based on the Random class.
It creates the new object, and stores it at the memory address.
It returns the memory address so that it can be saved in the dice variable. 

## VOID METHODS
Some methods are designed to complete their function, and end "quietly". In other words, they don't return values when they finish.
Methods designed to return a value upon completion are typically the result of an operation. A return value is a primary way a method can communicate back to the code that calls the method.

-> A method signature is the number of input parameters defined for each input parameter and the data type.

## OVERLOADED METHODS
An overloaded method is defined with multiple method signatures. Overloaded methods provide different ways to call the method or provide different types of data.
In some cases, overloaded versions of a given method allow the send values of different data types into the method. For example, the Console.WriteLine() method has 19 different overloaded versions. Most of those overloads allow sending of different types of data to be printed to the console.

int number = 7;
string text = "seven";

Console.WriteLine(number);
Console.WriteLine();
Console.WriteLine(text);

In other cases, overloaded versions of a given method allow the sending additional configuration details to the method about the result desired. For example, the Random.Next() method has three different overloaded versions. The three versions allow setting constraints on the randomly generated number.

The following code example calls the Random.Next() using three different overloaded versions.

Random dice = new Random();
int roll1 = dice.Next();
int roll2 = dice.Next(101);
int roll3 = dice.Next(50, 101);

Console.WriteLine($"First roll: {roll1}");
Console.WriteLine($"Second roll: {roll2}");
Console.WriteLine($"Third roll: {roll3}");

The first version of the Next() method doesn't set an upper and lower boundary, so the method will return values ranging from 0 to 2,147,483,647, which is the maximum value an int can store.

The second version of the Next() method specifies the maximum value as an upper boundary, so in this case, we can expect a random value between 0 and 100.

The third version of the Next() method specifies both the minimum and maximum values, so in this case, we can expect a random value between 50 and 100.


## ARRAYS
assign/set
string[] fraudulentOrderIDs = new string[3];
The new operator creates a new instance of an array in the computer's memory that can hold three string values. For more information about the new keyword, see the module "Call methods from the .NET Class Library using C#".

Notice that the first set of square brackets [] merely tells the compiler that the variable named fraudulentOrderIDs will be an array, but the second set of square brackets [3] contains the number of elements that the array will hold.

fraudulentOrderIDs[0] = "a123";
fraudulentOrderIDs[1] = "B456"; -> assign value like js

string[] fraudulentOrderIDs = { "A123", "B456", "C789" }; -> initialize

array.Length

## FOR EACH (ARRAY)

(for in ARRAY, no js é for of ARRAY)

string[] names = { "Bob", "Conrad", "Grant" };
foreach (string name in names)
{
    Console.WriteLine(name);
}

## VARIABLE NAME RULES
Variable names can contain alphanumeric characters and the underscore character. Special characters like the pound #, the dash -, and the dollar sign $ are not allowed.
Variable names must begin with an alphabetical letter or an underscore, not a number. Developers use the underscore for a special purpose, so try to not use that for now.
Variable names must NOT be a C# keyword. For example, these variable name declarations won't be allowed: float float; or string string;.
Variable names are case-sensitive, meaning that string MyValue; and string myValue; are two different variables.

## VARIABLE NAME CONVENTIONS
Variable names should use camel case, which is a style of writing that uses a lower-case letter at the beginning of the first word and an upper-case letter at the beginning of each subsequent word. For example: string thisIsCamelCase;.
Variable names should be descriptive and meaningful in your application. You should choose a name for your variable that represents the kind of data it will hold.
Variable names should be one or more entire words appended together. Don't use contractions because the name of the variable may be unclear to others who are reading your code.
Variable names shouldn't include the data type of the variable. You might see some advice to use a style like string strMyValue;. It was a popular style years ago. However, most developers don't follow this advice any more.

## PRIVATE AND PUBLIC
Classes also support visibility modifiers, which allow some values to be private or public. A private member can only be referenced by other members in the same class. A public member can be referenced outside of the class. So, you can create private fields or public fields.

## SCOPE
This works in JS:
let test = 5;

if (true) {
  test = 787
  console.log("a:", test)
}

console.log("b:", test)

But it won't work in C#:
bool flag = true;
int value;

if (flag)
{
    value = 10;
    Console.WriteLine("Inside of code block: " + value);
}

Console.WriteLine("Outside of code block: " + value);

But this works:
bool flag = true;
int value;

if (flag)
{
    value = 10;
    Console.WriteLine("Inside of code block: " + value);
}
and this works:
bool flag = true;
int value;
value = 23;
if (flag)
{
    value = 10;
    Console.WriteLine("Inside of code block: " + value);
}

Console.WriteLine("Outside of code block: " + value);

## METHOD
A method is a code block that is a unit of execution. In other words, once the method is called by its name, the entire method will execute until:

the runtime encounters the return keyword, or
the runtime encounters an exception and can't continue, or
the runtime successfully executes each line of code in the method

The method's name Main() is special. When the program is executed, by default the .NET Runtime will search for a method named Main() to use as the starting point, or entry point, for the program.

class -> A class is a container for members like methods, properties, events, fields, and so on. In the module "Call methods from the .NET Class Library using C#", you learned that you must create an instance of a class using the new keyword if you want to call a method that requires state (or rather, instance methods). Otherwise, you can call methods that are not stateful without first creating an instance of the class (or rather, static methods).

namespace -> A namespace disambiguates class names. In the module "Call methods from the .NET Class Library using C#", you learned how there are so many classes in the .NET Class Library that it's possible to have two classes with the same name. The namespace ensures you can instruct the compiler which class and method you want to work with by also specifying a namespace.:
namespace MyNewApp.Business
{
  // Classes here    
}
We can add as many namespaces as we want. We can create namespaces as many levels deep as we need. We would just keep appending child-namespace names using the dot operator.

## STATIC
using -> affect everything in the code file
namespaceclass myNewApp.
class
(static?,void?)

-------
